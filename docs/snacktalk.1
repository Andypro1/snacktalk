'''
'''  Snacktalk Version 3.7.0
'''
.de Sh
.br
.ne 5
.PP
\fB\\$1\fR
.PP
..
.TH Snacktalk 1 "8 Apr 2008" "Snacktalk 3.7.0"
.SH NAME
snacktalk - A multi-user chat program.
.SH SYNOPSIS
.BI "snacktalk [-s] [-Y] [-E] [-i] [-q] [-v] [-h " hostname_or_ip "] " username...
.SH DESCRIPTION
.I Snacktalk 3.7.0
.PP
Snacktalk is in essence a multi-user chat program.  It works almost exactly
like the UNIX talk program and even communicates with the same talk daemon(s),
but Snacktalk allows for multiple connections.

Snacktalk is based off of YTalk version 3.3.0 and should be compatible with
current YTalk installations.

The
.I username
field may be formatted in several different ways:
.br
	name          - some user on your machine
.br
	name@host     - some user on a different machine
.br
	name#tty      - some user on a particular terminal
.br
	name#tty@host - some user on a particular tty on a
.br
				 different machine
.br
	name@host#tty - same as "name#tty@host"
.br
	aliasname     - an alias defined in your .snacktalkrc
.PP
You can specify multiple user names on the command line, ie:
.sp
	snacktalk george fred@hissun.edu marc@grumpy.cc
.PP
The
.B -s
option starts your Snacktalk window in a shell.
.PP
The
.B -Y
option requires a capital Y or N as an answer to any yes/no
question.
.PP
The
.B -E
option requires you to press escape once before answering a
yes/no question (for people who type looking at the keyboard).
.PP
The
.B -i
option disables the auto-invite port (meaning you won't see
"talk to blah@blah.com", but your talk daemon will beep you instead).
.PP
The
.B -q
option causes Snacktalk to prompt you before quitting.
.PP
The
.B -v
option prints the program version and exits.
.PP
The
.B -h
option specifies the name or address of the local machine; this
is useful on multi-homed machines, or virtual hosts, to specify which
network interface to use for communication.
.PP
For each user on the command line, Snacktalk will attempt to connect to the talk
daemon on the specified user's host and determine if that user has left an
invitation for you to call.  If not, Snacktalk leaves an invitation for him
and tells his talk daemon to send an announcement to his screen.  There
is no dedicated Snacktalk daemon.  Right now, Snacktalk is able to communicate
with BOTH existing versions of UNIX talk daemons.  For any particular
host, Snacktalk will attempt to communicate with a talk daemon the caller's
host also supports.  If the two hosts have no daemon in common, then
UNIX talk will not function at all, but a connection is possible through
(and only through) Snacktalk.
.PP
Once a connection has been established between two users, they can chat back
and forth to their hearts' content.  The connection is terminated when one
of them hits control-C or selects quit off the main menu.
.PP
Snacktalk is perfectly compatible with UNIX talk and they can even converse
with each other without any problems.  However, many of the features of Snacktalk
can only operate when you are connected to a user who is also using Snacktalk.
For the rest of this document, it will be assumed that all connected users
are using Snacktalk, unless otherwise stated.
.PP
If you specified more than one user on the Snacktalk command line, then Snacktalk
will process and add each user to the conversation as they respond to your
invitation.  As each new user enters the conversation, the screen is further
subdivided into smaller and smaller windows, one for each connected user.
Right now, the number of connected users is limited by the number of lines
on your terminal (or window), for each connected user needs at least three
lines.
.PP
As each new user is added to the conversation, Snacktalk will transmit information
about that user to all other connected Snacktalk users so that their screens will
also subdivide and incorporate the new user.  If the new user is using UNIX
talk, then information about him will NOT be transmitted, for his screen
would be unable to accept multiple connections.  I have given brief thought
to allowing at least the output of UNIX talk users to be transmitted to
all connected Snacktalk users, but I have not written any code to do so.  Note
that even though UNIX talk cannot handle multiple connections, it is still
possible for Snacktalk to handle multiple UNIX "talk" connections.  For example,
george (using Snacktalk) could communicate with fred and joe (both using UNIX
talk), but fred and joe would be unaware of each other.  The best way to
understand the limitations that UNIX "talk" places on Snacktalk is to test
various connections between the two and see how things work.
.PP
.SH ESCAPE MENU
Whenever you are using Snacktalk, you can hit the
.I ESCAPE
key to bring up a menu which at this
moment has these options:
.sp
        a: add a user
.br
        d: delete a user
.br
        k: kill all unconnected
.br
        o: options
.br
        r: rering all
.br
        s: shell
.br
        u: user list
.br
        w: output user to file
.br
        q: quit
.PP
By choosing option "a", you are given the opportunity to type the name of any
user you wish to include into the conversation.  Again, Snacktalk will accept an
invitation from that user if an invitation exists, or will leave an invitation
and ring the given user.
.PP
By choosing option "d", you can select the name of a connection to terminate.
.PP
By choosing option "k", you can make Snacktalk forget all pending (waiting)
connections.
.PP
By choosing option "o", you can view and/or modify any of the Snacktalk options.
See the OPTIONS section below for a list of Snacktalk options.
.PP
By choosing option "r", all users that have not yet responded to your talk
invitation will be re-rung.
.PP
By choosing option "s", you can invoke a shell in your Snacktalk window.  All
other users will see what happens in your shell.  Snacktalk will automatically
resize your window down to the size of the smallest window you are
connected to, in order to ensure that all users always see the same thing.
.PP
The "u" option displays a list of connected and unconnected users, as well
as their window sizes and what version of talk software they are running.
.PP
By choosing option "w", you can select any connected user and type the
name of a file, and all further output from that user will be dumped to the
specified file.  The file, if it exists, will be OVERWRITTEN.  By choosing
"w" and the same user again, further output to the file will be terminated.
.PP
Oh, one other thing:  when user A attempts to snacktalk to user B, but user B is
already snacktalking with user C, user A's Snacktalk program will realize that user
B is already using Snacktalk, and will communicate with user B's Snacktalk program
directly in order to initialize the conversation.  User B will see a nice
windowed message like:
.sp
	Do you wish to talk with user A?
.PP
and he will be prompted for a yes/no answer.  This, in my opinion, is much
preferable to blitting the announcement message and messing up user B's
screen. The command-line option "\-i" turns this off.

.SH RUNTIME OPTIONS
When you select Options off of the main menu, you are given the opportunity
to edit the Snacktalk options.  The current options are:
.sp
	s: turn scrolling [off/on]
.br
	w: turn word-wrap [off/on]
.br
	i: turn auto-import [off/on]
.br
	v: turn auto-invite [off/on]
.br
	r: turn reringing [off/on]
.br
	p: [don't] prompt before rerings
.br
	q: [don't] prompt before quitting
.PP
If
.I scrolling
is turned on, then a user's window will scroll when he reaches the bottom,
instead of wrapping back around to the top.
.PP
If
.I word-wrap
is turned on, then any word which would overextend the right margin will
be automatically moved to the next line on your screen.
.PP
If
.I auto-import
is turned on, then Snacktalk will assume that you wish to talk to any users
which connect to other Snacktalk users which are connected to you.  That last
sentence does make sense; try again.  Snacktalk will add these users to your
session automatically, without asking you for verification.
.PP
If
.I auto-invite
is turned on, then Snacktalk will automatically accept any connection requested
by another user and add them to your session.  You will not be asked for
verification.
.PP
If
.I rering
is turned on, then Snacktalk will re-ring any user who does not respond to
your invitation within 30 seconds.
.PP
If
.I prompt-rering
is turned on, then Snacktalk will ask you before re-ringing a user.
.PP
If
.I prompt-quit
is turned on, then Snacktalk will wait for keyboard input before quitting.
.PP
Any of these options can be set to your preference in your .snacktalkrc file,
as described below.
.SH snacktalk STARTUP FILE
If your home directory contains a file named ".snacktalkrc" then Snacktalk will
read this file while starting up.  All Snacktalk runtime options, as well as
some startup options, can be set in this file.
.Sh "SETTING BOOLEAN OPTIONS"
Boolean options can be pre-set with the following syntax:
.sp
	turn
.I option
[off | on]
.PP
where
.I option
is one of
.I scrolling ,
.I word-wrap ,
.I auto-import ,
.I auto-invite ,
.I rering ,
.I prompt-rering ,
.I prompt-quit ,
.I caps ,
.I escape-yesno ,
.I noinvite ,
.I ignorebreak ,
or
.I beeps .
Setting these options works just like described above.
For example, one could enable word-wrap with the line:
.sp
	turn word-wrap on
.Sh "ALIASES"
You can setup aliases so you don't have to type the full address of
the user you want to ring.  There are three types of aliases:
.TP 12
.B "alias \fIaliasname\fR@ \fIusername\fR@"
Replaces \fIaliasname\fR@\fIhost\fR with \fIusername\fR@\fIhost\fR for
every host. The '@' at the end of \fIusername@\fR is not required.
.TP 12
.B "alias @\fIaliashost\fR @\fIrealhost\fR"
Replaces \fIuser\fR@\fIaliashost\fR with \fIuser\fR@\fIrealhost\fR for
every user. The '@' at the beginning of @\fIrealhost\fR is not required.
.TP 12
.B "alias \fIaliasname\fR \fIuser\fR@\fIhost\fR"
Replaces \fIaliasname\fR with \fIuser\fR@\fIhost\fR.

.Sh "SELECTING INTERFACES AND VIRTUAL HOSTS"
On machines with multiple IP addresses (multiple interfaces, or virtual
hosts), you can choose the default address to use for communication with
Snacktalk, using the
.B localhost
command in your .snacktalkrc file.  The syntax is:
.TP 12
.B "localhost \fIhostname-or-IP-address\fR"

.Sh "SETTING RE-ADDRESS MODES"
The purpose of readdressing is to allow Snacktalk connections across
point-to-point network gateways where the local machines know themselves
by a different address (and typically hostname) than the remote machines.
The basic syntax of a readdress command is this:
.sp
	readdress
.I from-address
.I to-address
.I domain
.PP
The
.I readdress
statement simply makes a claim that the machine(s) in
.I domain
communicate with the machine(s) at
.I from-address
by sending a packet to
.I to-address .
Since most users have no use for this whatsoever, I'll describe it only
briefly.
.PP
THIS IS NOT ROUTING.  For example, my machine at home is connected via
PPP to the network at my office.  My machine at home thinks its ethernet
address is 192.188.253.1 and its hostname is "talisman.com".  The network
at my office has the address 192.67.141.0.  When I'm connected via PPP,
my home machine is placed into the office network as address 192.67.141.9
with hostname "talisman.austin.eds.com".
.PP
Snacktalk needs to know that if it is running on domain 192.67.141.0 and
receives packets from 192.188.253.1 that it should respond to
192.67.141.9, not 192.188.253.1.  right?  right.  okay, okay, okay.
I put this line into my .snacktalkrc on both ends:
.sp
	readdress talisman talisman.austin.eds.com 192.67.141.0
.PP
On my home end, this translates to:
.sp
	readdress 192.188.253.1 192.67.141.9 192.67.141.0
.PP
which tells my home machine to advertise itself as "192.67.141.9" instead
of "192.188.253.1" when Snacktalk-ing to machines on the network "192.67.141.0".
On the office end, the readdress command translates to:
.sp
	readdress 192.67.141.9 192.67.141.9 192.67.141.0
.PP
which the office machines basically ignore.
.PP
Note that, in this case, the problem could also have been solved by
telling the home Snacktalk to use the 192.67.141.0 interface, when doing
Snacktalk requests across the PPP link.

.SH FILES

/usr/local/etc/snacktalkrc
.br
    System-wide defaults file.
.PP
~/.snacktalkrc
.br
    User's local configuration file.  This file overrides
.br
    options set in the system snacktalkrc file.

.SH CURRENT MAINTAINERS

Andy Strassburg
.br
Adam Pippin
.br
Jeff Clagg
.br
<http://snacktalk.snackbox.org/>

.SH ORIGINAL AUTHOR

Britt Yenne

.SH PAST MAINTAINERS

Roger Espel Llima
.br
Jessica Peterson
.br
Andreas Kling <keso@impul.se>

.SH CONTRIBUTORS
In no particular order, people who have contributed to YTalk or Snacktalk:
	Britt Yenne
	Roger Espel Llima
	Jessica Peterson
	Carl Edman
	Tobias Hahn
	Geoff W.
	Sitaram Ramaswamy
	Magnus Hammerin
	Thilo Wunderlich
	Jonas Yngvesson
	Andreas Stolcke
	Pete Wenzel
	John Vanderpool
	Shih-Chen Huang
	Andrew Myers
	Duncan Sinclair
	Evan McLean
	Larry Schwimmer
	J. Adam Hawkes
	Mark Musone
	Steve McIntyre
	Katarina Erkkonen
	Alexander Rigbo

.SH BUGS
Please notify us of any bugs at any mailing lists or forums available at
<http://snacktalk.snackbox.org/>

.SH SEE ALSO
http://snacktalk.snackbox.org/

.SH LICENSE
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Portions are released under the terms of the GNU General Public License
version 2 with no option to use a later version.

This program is distributed in the hope that it will be useful, but
\fBWITHOUT ANY WARRANTY\fR; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
